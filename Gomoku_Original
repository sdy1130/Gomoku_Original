def make_empty_board(sz):
    
    board = []
    for i in range(sz):
        board.append([" "]*sz)
    return board

def is_empty(board):
    
    for i in range(len(board)):
        for j in range(len(board)):
            if board[i][j] != " ":
                return False
    
    return True    

def is_bounded(board, y_end, x_end, length, d_y, d_x):
    
    if y_end + d_y < len(board) and 0 <= x_end + d_x < len(board) and y_end - length*d_y >= 0 and 0 <= x_end - length*d_x < len(board):
    
        if board[y_end + d_y][x_end + d_x] == " " and board[y_end - length*d_y][x_end - length*d_x] == " ":
            
            return "OPEN"
            
        elif board[y_end + d_y][x_end + d_x] == " " or board[y_end - length*d_y][x_end - length*d_x] == " ":
            
            return "SEMIOPEN"
            
        else:
            
            return "CLOSED"
        
    elif y_end + d_y < len(board) and 0 <= x_end + d_x < len(board):
        if board[y_end + d_y][x_end + d_x] == " ":
            return "SEMIOPEN"
                
    elif y_end - length*d_y >= 0 and 0 <= x_end - length*d_x < len(board):
        if board[y_end - length*d_y][x_end - length*d_x] == " ":
            return "SEMIOPEN"

    else:
        return "CLOSED"  
        
def put(board, y, x, d_y, d_x, length, col): # change it to my own
    
    counts = {"w": 0, "b": 0, " ": 0}
    
    for i in range(length):
        
        if sq_in_board(board, y, x):
            
            counts[board[y][x]] += 1
            
        y += d_y
        x += d_x
        
    if counts[col] == length:
        #check if there are stones of colour col on either end
        #of the sequence
            
        y_before = y - (length+1)*d_y
        x_before = x - (length+1)*d_x
        if ((not sq_in_board(board, y, x)) or board[y][x] != col) and \
        ((not sq_in_board(board, y_before, x_before)) or board[y_before][x_before] != col):
            
            return True
            
        else:
            
            return False
    else:
        
        return False

    
def sq_in_board(board, y, x):
    
    return 0<=y<len(board) and 0 <=x<len(board[0])
    
def detect_row(board, col, y_start, x_start, length, d_y, d_x):
    
    #Whose first element is the number of open sequences of colour col of length length in the row R, and whose second element is the number of semi-open sequences of colour col of length length in the row R
    
    #what if bb_b --> length 4 would return true which is not
    #what if bbbb --> length 3 would return true which is not... consider these cases
    
    count_open = 0
    count_semi = 0
    
    while (0 <= y_start < len(board) and 0 <= x_start < len(board)):
        
        if put(board, y_start, x_start, d_y, d_x, length, col):                    
            
            if is_bounded(board, y_start + d_y*length - d_y, x_start + d_x*length - d_x, length, d_y, d_x) == "OPEN":

                count_open += 1
                
            elif is_bounded(board, y_start + d_y*length - d_y, x_start + d_x*length - d_x, length, d_y, d_x) == "SEMIOPEN":

                count_semi += 1            
                        
        y_start += d_y
        x_start += d_x            
       
    return count_open, count_semi                   

def detect_rows(board, col, length):
    
    count_open = 0
    count_semi = 0
    count_open_total = 0
    count_semi_total = 0
    
    #top to bot
    
    for i in range(len(board)):
        
        count_open, count_semi = detect_row(board, col, 0, i, length, 1, 0)
        count_open_total += count_open
        count_semi_total += count_semi
        
    #left to right
    
    for i in range(len(board)):
        
        count_open, count_semi = detect_row(board, col, i, 0, length, 0, 1)
        count_open_total += count_open
        count_semi_total += count_semi
        
    #top left to bot right
    
    for i in range(len(board) - 2):
        
        count_open, count_semi = detect_row(board, col, 0, i, length, 1, 1)
        count_open_total += count_open
        count_semi_total += count_semi
        
    for i in range(1, len(board) - 2):
        
        count_open, count_semi = detect_row(board, col, i, 0, length, 1, 1)
        count_open_total += count_open
        count_semi_total += count_semi

    #top right to bot left
    
    for i in range(2, len(board)):
        
        count_open, count_semi = detect_row(board, col, 0, i, length, 1, -1)
        count_open_total += count_open
        count_semi_total += count_semi
        
    for i in range(1, len(board) - 2):
        
        count_open, count_semi = detect_row(board, col, i, len(board) - 1, length, 1, -1)
        count_open_total += count_open
        count_semi_total += count_semi
        
    return count_open_total, count_semi_total
    
def score(board):
    MAX_SCORE = 100000
    
    open_b = {}
    semi_open_b = {}
    open_w = {}
    semi_open_w = {}
    
    for i in range(2, 6):
        open_b[i], semi_open_b[i] = detect_rows(board, "b", i)
        open_w[i], semi_open_w[i] = detect_rows(board, "w", i)
        
    
    if open_b[5] >= 1 or semi_open_b[5] >= 1:
        return MAX_SCORE
    
    elif open_w[5] >= 1 or semi_open_w[5] >= 1:
        return -MAX_SCORE
        
    return (-10000 * (open_w[4] + semi_open_w[4])+ 
            500  * open_b[4]                     + 
            50   * semi_open_b[4]                + 
            -100  * open_w[3]                    + 
            -30   * semi_open_w[3]               + 
            50   * open_b[3]                     + 
            10   * semi_open_b[3]                +  
            open_b[2] + semi_open_b[2] - open_w[2] - semi_open_w[2])
    
def search_max(board):
    
    max_score_y, max_score_x = 0, 0
    max_score = -999999
    
    
    for i in range(len(board)):
        for j in range(len(board)):
            
            if board[i][j] == " ":
                board[i][j] = "b"
                
                if max_score < score(board):
                    max_score = score(board)
                    max_score_y = i
                    max_score_x = j
                
                board[i][j] = " "

    return max_score_y, max_score_x        
            
def is_win(board):
    
    #top to bot
    
    for i in range(len(board)):
        
        if is_win_counter(board, "w", 0, i, 1, 0) != False:
            
            return "White won"
            
        elif is_win_counter(board, "b", 0, i, 1, 0) != False:
            
            return "Black won"
    
    #left to right
    
    
    for i in range(len(board)):
        
        if is_win_counter(board, "w", i, 0, 0, 1) != False:
            
            return "White won"
            
        elif is_win_counter(board, "b", i, 0, 0, 1) != False:
            
            return "Black won"
        
    #top left to bot right
    
    for i in range(len(board) - 4):
        
        if is_win_counter(board, "w", 0, i, 1, 1) != False:
            
            return "White won"
            
        elif is_win_counter(board, "b", 0, i, 1, 1) != False:
            
            return "Black won"
        
    for i in range(1, len(board) - 4):
        
        if is_win_counter(board, "w", i, 0, 1, 1) != False:
            
            return "White won"
            
        elif is_win_counter(board, "b", i, 0, 1, 1) != False:
            
            return "Black won"
            
    #top right to bot left
    
    for i in range(4, len(board)):
        
        if is_win_counter(board, "w", 0, i, 1, -1) != False:
            
            return "White won"
        
        elif is_win_counter(board, "b", 0, i, 1, -1) != False:
            
            return "Black won"
        
    for i in range(1, len(board) - 4):
        
        if is_win_counter(board, "w", i, len(board) - 1, 1, -1) != False:
            
            return "White won"
        
        elif is_win_counter(board, "w", i, len(board) - 1, 1, -1) != False:
            
            return "Black won"
    
    #check Draw
    
    for i in range(len(board)):
        for j in range(len(board)):
            
            if board[i][j] == " ":
                
                return "Continue Playing"
    
    return "Draw"
        
def is_win_counter(board, col, y_start, x_start, d_y, d_x):
    
    #Whose first element is the number of open sequences of colour col of length length in the row R, and whose second element is the number of semi-open sequences of colour col of length length in the row R
    
    count_col = 0    
    
    while(y_start < len(board) and 0 <= x_start < len(board) and count_col < 5):
            
        if board[y_start][x_start] == col:
            
            count_col += 1
        
        else:
            
            count_col = 0
            
        y_start += d_y
        x_start += d_x

        
    if count_col != 5:
        
        return False
    
    else:
        
        return True

def print_board(board):
    
    s = "*"
    for i in range(len(board[0])-1):
        s += str(i%10) + "|"
    s += str((len(board[0])-1)%10)
    s += "*\n"
    
    for i in range(len(board)):
        s += str(i%10)
        for j in range(len(board[0])-1):
            s += str(board[i][j]) + "|"
        s += str(board[i][len(board[0])-1]) 
    
        s += "*\n"
    s += (len(board[0])*2 + 1)*"*"
    
    print(s)
    
def play_gomoku(board_size):
    
    board = make_empty_board(board_size)
    board_height = len(board)
    board_width = len(board[0])
    
    while True:
        print_board(board)
        if is_empty(board):
            move_y = board_height // 2
            move_x = board_width // 2
        else:
            move_y, move_x = search_max(board)
            
        print("Computer move: (%d, %d)" % (move_y, move_x))
        board[move_y][move_x] = "b"
        print_board(board)
        #analysis(board)
        
        game_res = is_win(board)
        if game_res in ["White won", "Black won", "Draw"]:
            return game_res
        
        print("Your move:")
        move_y = int(input("y coord: "))
        move_x = int(input("x coord: "))
        board[move_y][move_x] = "w"
        print_board(board)
        #analysis(board)
        
        game_res = is_win(board)
        if game_res in ["White won", "Black won", "Draw"]:
            return game_res

def analysis(board):
    for c, full_name in [["b", "Black"], ["w", "White"]]:
        print("%s stones" % (full_name))
        for i in range(2, 6):
            
            open, semi_open = detect_rows(board, c, i)
            
            print("Open rows of length %d: %d" % (i, open))
            print("Semi-open rows of length %d: %d" % (i, semi_open))
        
def put_seq_on_board(board, y, x, d_y, d_x, length, col):
    for i in range(length):
        board[y][x] = col        
        y += d_y
        x += d_x
def test_is_empty():
    board  = make_empty_board(8)
    if is_empty(board):
        print("TEST CASE for is_empty PASSED")
    else:
        print("TEST CASE for is_empty FAILED")

def test_is_bounded():
    board = make_empty_board(8)
    x = 5; y = 1; d_x = 0; d_y = 1; length = 3
    put_seq_on_board(board, y, x, d_y, d_x, length, "w")
    print_board(board)
    
    y_end = 3
    x_end = 5

    if is_bounded(board, y_end, x_end, length, d_y, d_x) == 'OPEN':
        print("TEST CASE for is_bounded PASSED")
    else:
        print("TEST CASE for is_bounded FAILED")


def test_detect_row():
    board = make_empty_board(8)
    x = 5; y = 1; d_x = 0; d_y = 1; length = 3
    put_seq_on_board(board, y, x, d_y, d_x, length, "w")
    print_board(board)
    if detect_row(board, "w", 0,x,length,d_y,d_x) == (1,0):
        print("TEST CASE for detect_row PASSED")
    else:
        print("TEST CASE for detect_row FAILED")

def test_detect_rows():
    board = make_empty_board(8)
    x = 5; y = 1; d_x = 0; d_y = 1; length = 3; col = 'w'
    put_seq_on_board(board, y, x, d_y, d_x, length, "w")
    print_board(board)
    if detect_rows(board, col,length) == (1,0):
        print("TEST CASE for detect_rows PASSED")
    else:
        print("TEST CASE for detect_rows FAILED")

def test_search_max():
    board = make_empty_board(8)
    x = 5; y = 0; d_x = 0; d_y = 1; length = 4; col = 'w'
    put_seq_on_board(board, y, x, d_y, d_x, length, col)
    x = 6; y = 0; d_x = 0; d_y = 1; length = 4; col = 'b'
    put_seq_on_board(board, y, x, d_y, d_x, length, col)
    print_board(board)
    if search_max(board) == (4,6):
        print("TEST CASE for search_max PASSED")
    else:
        print("TEST CASE for search_max FAILED")

def easy_testset_for_main_functions():
    test_is_empty()
    test_is_bounded()
    test_detect_row()
    test_detect_rows()
    test_search_max()

def some_tests():
    board = make_empty_board(8)

    board[0][5] = "w"
    board[0][6] = "b"
    y = 5; x = 2; d_x = 0; d_y = 1; length = 3
    put_seq_on_board(board, y, x, d_y, d_x, length, "w")
    print_board(board)
    analysis(board)
    
    # Expected output:
    #       *0|1|2|3|4|5|6|7*
    #       0 | | | | |w|b| *
    #       1 | | | | | | | *
    #       2 | | | | | | | *
    #       3 | | | | | | | *
    #       4 | | | | | | | *
    #       5 | |w| | | | | *
    #       6 | |w| | | | | *
    #       7 | |w| | | | | *
    #       *****************
    #       Black stones:
    #       Open rows of length 2: 0
    #       Semi-open rows of length 2: 0
    #       Open rows of length 3: 0
    #       Semi-open rows of length 3: 0
    #       Open rows of length 4: 0
    #       Semi-open rows of length 4: 0
    #       Open rows of length 5: 0
    #       Semi-open rows of length 5: 0
    #       White stones:
    #       Open rows of length 2: 0
    #       Semi-open rows of length 2: 0
    #       Open rows of length 3: 0
    #       Semi-open rows of length 3: 1
    #       Open rows of length 4: 0
    #       Semi-open rows of length 4: 0
    #       Open rows of length 5: 0
    #       Semi-open rows of length 5: 0
    
    y = 3; x = 5; d_x = -1; d_y = 1; length = 2
    
    put_seq_on_board(board, y, x, d_y, d_x, length, "b")
    print_board(board)
    analysis(board)
    
    # Expected output:
    #        *0|1|2|3|4|5|6|7*
    #        0 | | | | |w|b| *
    #        1 | | | | | | | *
    #        2 | | | | | | | *
    #        3 | | | | |b| | *
    #        4 | | | |b| | | *
    #        5 | |w| | | | | *
    #        6 | |w| | | | | *
    #        7 | |w| | | | | *
    #        *****************
    #
    #         Black stones:
    #         Open rows of length 2: 1
    #         Semi-open rows of length 2: 0
    #         Open rows of length 3: 0
    #         Semi-open rows of length 3: 0
    #         Open rows of length 4: 0
    #         Semi-open rows of length 4: 0
    #         Open rows of length 5: 0
    #         Semi-open rows of length 5: 0
    #         White stones:
    #         Open rows of length 2: 0
    #         Semi-open rows of length 2: 0
    #         Open rows of length 3: 0
    #         Semi-open rows of length 3: 1
    #         Open rows of length 4: 0
    #         Semi-open rows of length 4: 0
    #         Open rows of length 5: 0
    #         Semi-open rows of length 5: 0
    #     
    
    y = 5; x = 3; d_x = -1; d_y = 1; length = 1
    put_seq_on_board(board, y, x, d_y, d_x, length, "b");
    print_board(board);
    analysis(board);
    
    #        Expected output:
    #           *0|1|2|3|4|5|6|7*
    #           0 | | | | |w|b| *
    #           1 | | | | | | | *
    #           2 | | | | | | | *
    #           3 | | | | |b| | *
    #           4 | | | |b| | | *
    #           5 | |w|b| | | | *
    #           6 | |w| | | | | *
    #           7 | |w| | | | | *
    #           *****************
    #        
    #        
    #        Black stones:
    #        Open rows of length 2: 0
    #        Semi-open rows of length 2: 0
    #        Open rows of length 3: 0
    #        Semi-open rows of length 3: 1
    #        Open rows of length 4: 0
    #        Semi-open rows of length 4: 0
    #        Open rows of length 5: 0
    #        Semi-open rows of length 5: 0
    #        White stones:
    #        Open rows of length 2: 0
    #        Semi-open rows of length 2: 0
    #        Open rows of length 3: 0
    #        Semi-open rows of length 3: 1
    #        Open rows of length 4: 0
    #        Semi-open rows of length 4: 0
    #        Open rows of length 5: 0
    #        Semi-open rows of length 5: 0
    
if __name__ == '__main__':
    
    easy_testset_for_main_functions()
    
    some_tests()
    
    #print(play_gomoku(8))
